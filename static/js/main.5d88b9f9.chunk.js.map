{"version":3,"sources":["Blog.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","PostOverview","props","state","id","value","_id","title","body","date","lastUpdate","Card","style","Body","Title","this","Text","Footer","className","Component","Blog","error","isLoaded","posts","get","then","res","setState","data","catch","err","response","map","key","Home","App","HashRouter","basename","Navbar","bg","expand","sticky","Brand","Nav","Link","href","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIAA,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,mBAE9C,IAIMC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,GAAIF,EAAMG,MAAMC,IAChBC,MAAOL,EAAMG,MAAME,MACnBC,KAAMN,EAAMG,MAAMG,KAClBC,KAAMP,EAAMG,MAAMI,KAClBC,WAAYR,EAAMG,MAAMK,YAPb,E,sEAiBf,OACI,kBAACC,EAAA,EAAD,CAAMC,MALQ,CACd,aAAgB,SAKZ,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAaC,KAAKZ,MAAMI,OACxB,kBAACI,EAAA,EAAKK,KAAN,KAAYD,KAAKZ,MAAMK,OAE3B,kBAACG,EAAA,EAAKM,OAAN,CAAaC,UAAU,cAAcH,KAAKZ,MAAMM,W,GAxBrCU,aAmRZC,E,YAjDX,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTkB,MAAO,KACPC,UAAU,EACVC,MAAO,IALI,E,iFASE,IAAD,OAChB1B,IAAM2B,IAhPI,iDAiPTC,KAAK,SAAAC,GACE,EAAKC,SAAS,CACVL,UAAU,EACVC,MAAOG,EAAIE,KAAKL,UAI3BM,MAAM,SAAAC,GACC,EAAKH,SAAS,CACVL,UAAU,EACVD,MAAOS,EAAIC,SAASH,W,+BAM1B,IAAD,EAC8Bb,KAAKZ,MAAhCkB,EADH,EACGA,MAAOC,EADV,EACUA,SAAUC,EADpB,EACoBA,MAEzB,OAAIF,EACO,uCAAaA,GAEnBC,EASDC,EAAMS,IAAI,SAAAhC,GAAI,OACV,kBAAC,EAAD,CAAciC,IAAKjC,EAAKM,IAAKD,MAAOL,MARpC,6BAvQA,8C,GAmOGmB,aCzObe,E,iLAEE,OACI,6BACI,oDACA,uD,GALGf,a,gBC4CJgB,E,iLAvBP,OACI,kBAACC,EAAA,EAAD,CAAYC,SAAS,KACjB,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,OAAO,OAClC,yBAAK7B,MAZA,CACjB,MAAS,MACT,WAAc,MACd,YAAe,MACf,QAAW,SASK,kBAAC0B,EAAA,EAAOI,MAAR,YACA,kBAACC,EAAA,EAAIC,KAAL,CAAUC,KAAK,MAAf,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,UAAf,UAIR,yBAAKjC,MA1BK,CAClB,MAAS,MACT,WAAc,MACd,YAAe,MACf,UAAa,OAuBD,kBAACkC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW9B,Y,GA/BhDD,aCMEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.5d88b9f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport axios from \"axios\";\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\nconst POSTS_URL = \"https://ethanwang-backend.herokuapp.com/posts\";\n\nconst LOADING = \"loading... shoutout heroku free tier!!\"\n\nclass PostOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.value._id,\n            title: props.value.title,\n            body: props.value.body,\n            date: props.value.date,\n            lastUpdate: props.value.lastUpdate\n        };\n    }\n\n    render() {\n        // <Link to={\"/blog/\"+this.state.id}><h1>{this.state.title}</h1></Link>\n        const cardStyle = {\n            \"marginBottom\": \"10px\"\n        }\n\n        return (\n            <Card style={cardStyle}>\n                <Card.Body>\n                    <Card.Title>{this.state.title}</Card.Title>\n                    <Card.Text>{this.state.body}</Card.Text>\n                </Card.Body>\n                <Card.Footer className=\"text-muted\">{this.state.date}</Card.Footer>\n            </Card>\n        );\n    }\n}\n\n/* class Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.match.params.id,\n            error: null,\n            isLoaded: false,\n            data: null\n        };\n    }\n\n    componentDidMount() {\n        axios.get(POSTS_URL + \"/\" + this.state.id)\n        .then(res => {\n                this.setState({\n                    isLoaded: true,\n                    data: res.data\n                });\n            },\n        )\n        .catch(err => {\n            this.setState({\n                isLoaded: true,\n                error: err.response.data\n            })\n        });\n    }\n\n    render() {\n        const { error, isLoaded, data } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>{LOADING}</div>;\n        }\n            \n        return (\n            <div>\n                <h1>{data.title}</h1>\n                <p>{data.body}</p>\n                <p>Posted on: {data.date}</p>\n            </div>\n        );\n    }\n}\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: \"\",\n            body: \"\"\n        };\n\n        this.handleChangeField = this.handleChangeField.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChangeField(key, event) {\n        this.setState({\n            [key]: event.target.value\n        });\n    }\n\n    handleSubmit() {\n        const { title, body } = this.state;\n\n        axios.post(POSTS_URL + \"/new\", {\n            title: title,\n            body: body\n        })\n        .then(res => {\n                this.props.history.push(\"/blog/posts/\" + res.data.id);\n            }\n        )\n        .catch(err => console.error(err));\n    }\n\n    render() {\n        const { title, body } = this.state;\n\n        return (\n            <div>\n                <input value={title}\n                    onChange={ev => this.handleChangeField(\"title\", ev)}\n                    placeholder=\"Post Title\"\n                />\n                <textarea value={body}\n                    onChange={ev => this.handleChangeField(\"body\", ev)}\n                    placeholder=\"Post Body\"\n                />\n                <button onClick={this.handleSubmit}>Submit</button>\n            </div>\n        );\n    }\n}\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postId: props.value,\n            error: null,\n            isLoaded: false,\n            comments: []\n        };\n    }\n\n    componentDidMount() {\n        axios.get(POSTS_URL + \"/\" + this.state.postId + \"/comments\")\n        .then(res => {\n                this.setState({\n                    isLoaded: true,\n                    comments: res.data.comments\n                });\n            }\n        )\n        .catch(err => {\n                this.setState({\n                    isLoaded: true,\n                    error: err.response.data\n                });\n            }\n        );\n    }\n\n    render() {\n        const { error, isLoaded, comments } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n            \n        return (\n            comments.map(comment =>\n                <div key={comment._id}>\n                    <p>{comment.body}</p>\n                    <p>Posted on: {comment.date}</p>\n                </div>\n            )\n        );\n    }\n}\n\nclass CommentForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postId: props.value,\n            body: \"\"\n        };\n\n        this.handleChangeField = this.handleChangeField.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChangeField(key, event) {\n        this.setState({\n            [key]: event.target.value\n        });\n    }\n\n    handleSubmit() {\n        const { postId, body } = this.state;\n\n        axios.post(POSTS_URL + \"/\" + postId + \"/comments/new\", {\n            body: body\n        })\n        .then(res => {\n                this.setState({ body: \"\" });\n            }\n        )\n        .catch(err => console.log(err));\n    }\n\n    render() {\n        const { body } = this.state;\n\n        return (\n            <div>\n                <textarea value={body}\n                    onChange={ev => this.handleChangeField(\"body\", ev)}\n                    placeholder=\"Comment Body\"\n                />\n                <button onClick={this.handleSubmit}>Submit</button>\n            </div>\n        );\n    }\n} */\n\nclass Blog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            posts: []\n        };\n    }\n\n    componentDidMount() {\n        axios.get(POSTS_URL)\n        .then(res => {\n                this.setState({\n                    isLoaded: true,\n                    posts: res.data.posts\n                });\n            }\n        )\n        .catch(err => {\n                this.setState({\n                    isLoaded: true,\n                    error: err.response.data\n                });\n            }\n        );\n    }\n\n    render() {\n        const { error, isLoaded, posts } = this.state;\n\n        if (error) {\n            return <div>Error: {error}</div>;\n        }\n        if (!isLoaded) {\n            return (\n                <div>\n                    {LOADING}\n                </div>\n            );\n        }\n            \n        return (\n            posts.map(post =>\n                <PostOverview key={post._id} value={post} />\n            )\n        );\n    }\n}\n\nexport default Blog;\n// export const BlogPost = withRouter(Post);\n","import React, { Component } from \"react\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <h1>unlucky initials tbh</h1>\n                <h4>Ethan Wang etc etc</h4>\n            </div>\n        )\n    }\n}\n\nexport { Home };\n","import React, { Component } from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Blog from \"./Blog\";\nimport { Home } from \"./Home\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nclass App extends Component {\n    render() {\n        const bodyContainer = {\n            \"width\": \"70%\",\n            \"marginLeft\": \"15%\",\n            \"marginRight\": \"15%\",\n            \"marginTop\": \"2%\"\n        }\n\n        const navContainer = {\n            \"width\": \"70%\",\n            \"marginLeft\": \"15%\",\n            \"marginRight\": \"15%\",\n            \"display\": \"flex\"\n        }\n\n        // <Route exact path=\"/blog/:id\" component={BlogPost} />\n        return (\n            <HashRouter basename=\"/\">\n                <div>\n                    <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n                        <div style={navContainer}>\n                            <Navbar.Brand>ew.</Navbar.Brand>\n                            <Nav.Link href=\"#/\">Home</Nav.Link>\n                            <Nav.Link href=\"#/blog\">Blog</Nav.Link>\n                        </div>\n                    </Navbar>\n\n                    <div style={bodyContainer}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/blog/\" component={Blog} />\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}