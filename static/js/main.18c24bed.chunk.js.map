{"version":3,"sources":["Blog.js","About.js","App.js","serviceWorker.js","index.js"],"names":["PostOverview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","value","_id","title","body","date","numComments","react_default","a","createElement","Component","Blog","_this3","error","isLoaded","posts","_this4","fetch","then","res","json","result","setState","_this$state","message","map","post","Blog_PostOverview","key","About","App","BrowserRouter","Link","to","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAEMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,GAAIT,EAAMU,MAAMC,IAChBC,MAAOZ,EAAMU,MAAME,MACnBC,KAAMb,EAAMU,MAAMG,KAClBC,KAAMd,EAAMU,MAAMI,KAClBC,YAAaf,EAAMU,MAAMK,aAPdd,wEAYf,OACIe,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKd,KAAKI,MAAMI,OAChBI,EAAAC,EAAAC,cAAA,SAAId,KAAKI,MAAMK,MACfG,EAAAC,EAAAC,cAAA,uBAAed,KAAKI,MAAMM,MAC1BE,EAAAC,EAAAC,cAAA,sBAAcd,KAAKI,MAAMO,qBAlBdI,aAkFZC,GA1DQD,wBAYnB,SAAAC,EAAYpB,GAAO,IAAAqB,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACfC,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMJ,KACDQ,MAAQ,CACTc,MAAO,KACPC,UAAU,EACVC,MAAO,IALIH,mFASC,IAAAI,EAAArB,KAChBsB,MAAM,iDAAiDC,KACnD,SAAAC,GAAG,OAAIA,EAAIC,SACbF,KACE,SAACG,GACGL,EAAKM,SAAS,CACVR,UAAU,EACVC,MAAOM,EAAON,SAGtB,SAACF,GACGG,EAAKM,SAAS,CACVR,UAAU,EACVD,6CAMP,IAAAU,EAC8B5B,KAAKI,MAAhCc,EADHU,EACGV,MAAOC,EADVS,EACUT,SAAUC,EADpBQ,EACoBR,MAEzB,OAAIF,EACON,EAAAC,EAAAC,cAAA,qBAAaI,EAAMW,SAEzBV,EAKDC,EAAMU,IAAI,SAAAC,GAAI,OACVnB,EAAAC,EAAAC,cAACkB,EAAD,CAAcC,IAAKF,EAAKxB,IAAKD,MAAOyB,MALjCnB,EAAAC,EAAAC,cAAA,gCApCAC,cCxBJmB,mLATP,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qCALIC,aCsBLoB,mLAjBX,OACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,KAAT,QACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,UAAT,QACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,WAAT,SAEA1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW3B,IACtCJ,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWT,cAXjCnB,aCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.18c24bed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass PostOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.value._id,\n            title: props.value.title,\n            body: props.value.body,\n            date: props.value.date,\n            numComments: props.value.numComments\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.title}</h1>\n                <p>{this.state.body}</p>\n                <p>Posted on: {this.state.date}</p>\n                <p>Comments: {this.state.numComments}</p>\n            </div>\n        );\n    }\n}\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postId: props.value._id,\n            user: props.value.user,\n            body: props.value.body\n        };\n    }\n}\n\nclass Blog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            posts: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://ethanwang-backend.herokuapp.com/posts\").then(\n            res => res.json()\n        ).then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    posts: result.posts\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        );\n    }\n\n    render() {\n        const { error, isLoaded, posts } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n            \n        return (\n            posts.map(post =>\n                <PostOverview key={post._id} value={post} />\n            )\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from \"react\";\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                <h1>About</h1>\n                <p>My name is Ethan</p>\n            </div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from \"react\";\nimport { BrowserRouter, Link, Switch, Route } from \"react-router-dom\";\nimport Blog from \"./Blog\";\nimport About from \"./About\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/blog/\">Blog</Link>\n          <Link to=\"/about/\">About</Link>\n\n          <Switch>\n            <Route exact path=\"/blog/\" component={Blog} />\n            <Route exact path=\"/about/\" component={About} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}