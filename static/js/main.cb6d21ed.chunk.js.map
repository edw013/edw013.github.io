{"version":3,"sources":["Blog.js","About.js","App.js","serviceWorker.js","index.js"],"names":["POSTS_URL","PostOverview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","value","_id","title","body","date","lastUpdate","numComments","react_default","a","createElement","Link","to","Component","Post","_this2","match","params","error","isLoaded","data","_this3","fetch","then","res","json","result","setState","_this$state","message","Blog_Comments","Comments","_this4","postId","comments","_this5","_this$state2","map","comment","key","Blog","_this6","posts","_this7","_this$state3","post","Blog_PostOverview","BlogPost","withRouter","About","Welcome","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb6d21ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst POSTS_URL = \"https://ethanwang-backend.herokuapp.com/posts\";\n\nclass PostOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.value._id,\n            title: props.value.title,\n            body: props.value.body,\n            date: props.value.date,\n            lastUpdate: props.value.lastUpdate,\n            numComments: props.value.numComments\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to={\"/blog/posts/\"+this.state.id}><h1>{this.state.title}</h1></Link>\n                <p>{this.state.body}</p>\n                <p>Posted on: {this.state.date}</p>\n                <p>Comments: {this.state.numComments}</p>\n            </div>\n        );\n    }\n}\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.match.params.id,\n            error: null,\n            isLoaded: false,\n            data: null\n        };\n    }\n\n    componentDidMount() {\n        fetch(POSTS_URL + \"/\" + this.state.id).then(\n            res => res.json()\n        ).then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    data: result\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        );\n    }\n\n    render() {\n        const { id, error, isLoaded, data } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n            \n        return (\n            <div>\n                <h1>{data.title}</h1>\n                <p>{data.body}</p>\n                <p>Posted on: {data.date}</p>\n                <hr />\n                <Comments value={id} />\n            </div>\n        );\n    }\n}\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            postId: props.value,\n            error: null,\n            isLoaded: false,\n            comments: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(POSTS_URL + \"/\" + this.state.postId + \"/comments\").then(\n            res => res.json()\n        ).then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    comments: result.comments\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        );\n    }\n\n    render() {\n        const { error, isLoaded, comments } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n            \n        return (\n            comments.map(comment =>\n                <div key={comment._id}>\n                    <p>{comment.body}</p>\n                    <p>Posted on: {comment.date}</p>\n                </div>\n            )\n        );\n    }\n}\n\nclass Blog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            posts: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(POSTS_URL).then(\n            res => res.json()\n        ).then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    posts: result.posts\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        );\n    }\n\n    render() {\n        const { error, isLoaded, posts } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n            \n        return (\n            posts.map(post =>\n                <PostOverview key={post._id} value={post} />\n            )\n        );\n    }\n}\n\nexport default Blog;\nexport const BlogPost = withRouter(Post);","import React, { Component } from \"react\";\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                <h1>About</h1>\n                <p>My name is Ethan Wang.</p>\n                <p>Website TODO list:</p>\n                <ul>\n                    <li>new posts</li>\n                    <li>new comments</li>\n                    <li>sidebar menu</li>\n                    <li>comment chains</li>\n                    <li>q&a section?</li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nclass Welcome extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome!</h1>\n            </div>\n        )\n    }\n}\n\nexport { About, Welcome };","import React, { Component } from \"react\";\nimport { BrowserRouter, Link, Switch, Route } from \"react-router-dom\";\nimport Blog, { BlogPost } from \"./Blog\";\nimport { Welcome, About } from \"./About\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/blog/\">Blog</Link>\n          <Link to=\"/about/\">About</Link>\n\n          <Switch>\n            <Route exact path=\"/\" component={Welcome} />\n            <Route exact path=\"/blog/\" component={Blog} />\n            <Route exact path=\"/about/\" component={About} />\n            <Route path=\"/blog/posts/:id\" component={BlogPost} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}