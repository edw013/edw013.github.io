{"version":3,"sources":["Blog.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","POSTS_URL","LOADING","PostOverview","props","state","id","value","_id","title","preview","date","lastUpdate","Date","this","Card","style","Body","Link","to","Title","Text","Footer","className","toString","Component","Post","match","params","error","isLoaded","data","get","then","res","setState","catch","err","response","message","body","Blog","posts","map","key","BlogPost","withRouter","Home","src","alt","App","HashRouter","basename","Navbar","bg","expand","sticky","Brand","Nav","href","target","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f9819b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\n\r\nconst POSTS_URL = \"https://ethanwang-backend.herokuapp.com/posts\";\r\n\r\nconst LOADING = \"loading... shoutout heroku free tier!!\"\r\n\r\nclass PostOverview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: props.value._id,\r\n            title: props.value.title,\r\n            preview: props.value.preview,\r\n            date: props.value.date,\r\n            lastUpdate: props.value.lastUpdate\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const cardStyle = {\r\n            \"marginBottom\": \"10px\"\r\n        }\r\n\r\n        const date = new Date(this.state.date);\r\n\r\n        return (\r\n            <Card style={cardStyle}>\r\n                <Card.Body>\r\n                    <Link to={\"/blog/\"+this.state.id}>\r\n                        <Card.Title>{this.state.title}</Card.Title>\r\n                    </Link>\r\n                    <Card.Text>{this.state.preview}</Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer className=\"text-muted\">{date.toString()}</Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: props.match.params.id,\r\n            error: null,\r\n            isLoaded: false,\r\n            data: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(POSTS_URL + \"/\" + this.state.id)\r\n        .then(res => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    data: res.data\r\n                });\r\n            },\r\n        )\r\n        .catch(err => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                error: err.response.data\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, data } = this.state;\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        }\r\n        if (!isLoaded) {\r\n            return <div>{LOADING}</div>;\r\n        }\r\n        \r\n        const date = new Date(data.date);\r\n\r\n        return (\r\n            <div>\r\n                <h1>{data.title}</h1>\r\n                <p>{data.body}</p>\r\n                <p>{date.toString()}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/* class PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n            body: \"\"\r\n        };\r\n\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangeField(key, event) {\r\n        this.setState({\r\n            [key]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        const { title, body } = this.state;\r\n\r\n        axios.post(POSTS_URL + \"/new\", {\r\n            title: title,\r\n            body: body\r\n        })\r\n        .then(res => {\r\n                this.props.history.push(\"/blog/posts/\" + res.data.id);\r\n            }\r\n        )\r\n        .catch(err => console.error(err));\r\n    }\r\n\r\n    render() {\r\n        const { title, body } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <input value={title}\r\n                    onChange={ev => this.handleChangeField(\"title\", ev)}\r\n                    placeholder=\"Post Title\"\r\n                />\r\n                <textarea value={body}\r\n                    onChange={ev => this.handleChangeField(\"body\", ev)}\r\n                    placeholder=\"Post Body\"\r\n                />\r\n                <button onClick={this.handleSubmit}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Comments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postId: props.value,\r\n            error: null,\r\n            isLoaded: false,\r\n            comments: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(POSTS_URL + \"/\" + this.state.postId + \"/comments\")\r\n        .then(res => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    comments: res.data.comments\r\n                });\r\n            }\r\n        )\r\n        .catch(err => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error: err.response.data\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, comments } = this.state;\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        }\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        }\r\n            \r\n        return (\r\n            comments.map(comment =>\r\n                <div key={comment._id}>\r\n                    <p>{comment.body}</p>\r\n                    <p>Posted on: {comment.date}</p>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postId: props.value,\r\n            body: \"\"\r\n        };\r\n\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangeField(key, event) {\r\n        this.setState({\r\n            [key]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        const { postId, body } = this.state;\r\n\r\n        axios.post(POSTS_URL + \"/\" + postId + \"/comments/new\", {\r\n            body: body\r\n        })\r\n        .then(res => {\r\n                this.setState({ body: \"\" });\r\n            }\r\n        )\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        const { body } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <textarea value={body}\r\n                    onChange={ev => this.handleChangeField(\"body\", ev)}\r\n                    placeholder=\"Comment Body\"\r\n                />\r\n                <button onClick={this.handleSubmit}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n} */\r\n\r\nclass Blog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            posts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(POSTS_URL)\r\n        .then(res => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    posts: res.data.posts\r\n                });\r\n            }\r\n        )\r\n        .catch(err => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error: err.response.data\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, posts } = this.state;\r\n\r\n        if (error) {\r\n            return <div>Error: {error}</div>;\r\n        }\r\n        if (!isLoaded) {\r\n            return (\r\n                <div>\r\n                    {LOADING}\r\n                </div>\r\n            );\r\n        }\r\n            \r\n        return (\r\n            posts.map(post =>\r\n                <PostOverview key={post._id} value={post} />\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blog;\r\nexport const BlogPost = withRouter(Post);\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        let headshotStyle = {\r\n            \"width\": \"20%\"\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <img src={process.env.PUBLIC_URL + \"/ethan.jpg\"} alt=\"Ethan\" style={headshotStyle} />\r\n                <h1>Ethan Wang</h1>\r\n                <h3>About</h3>\r\n                <p>I'm a computer science major at UC San Diego.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { Home };\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport Blog, { BlogPost } from \"./Blog\";\r\nimport { Home } from \"./Home\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const bodyContainer = {\r\n            \"width\": \"70%\",\r\n            \"marginLeft\": \"15%\",\r\n            \"marginRight\": \"15%\",\r\n            \"marginTop\": \"2%\"\r\n        }\r\n\r\n        const navContainer = {\r\n            \"width\": \"70%\",\r\n            \"marginLeft\": \"15%\",\r\n            \"marginRight\": \"15%\",\r\n            \"display\": \"flex\"\r\n        }\r\n\r\n        return (\r\n            <HashRouter basename=\"/\">\r\n                <div>\r\n                    <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\r\n                        <div style={navContainer}>\r\n                            <Navbar.Brand>ew.</Navbar.Brand>\r\n                            <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                            <Nav.Link href=\"#/blog\">Blog</Nav.Link>\r\n                            <Nav.Link href={process.env.PUBLIC_URL + \"/Resume.pdf\"} target=\"_blank\">Resume</Nav.Link>\r\n                        </div>\r\n                    </Navbar>\r\n\r\n                    <div style={bodyContainer}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Home} />\r\n                            <Route exact path=\"/blog/\" component={Blog} />\r\n                            <Route exact path=\"/blog/:id\" component={BlogPost} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}